/* Global styles go here */
body {
    background: var(--surface-primary);
    color: var(--text-primary);
    font-size: var(--font-size-sm);
    font-family: var(--font-sans);
    line-height: var(--leading-normal);
    font-size-adjust: from-font;
    margin: 0;
}

:is(h1, h2, h3, h4) {
    line-height: var(--leading-tight);
    text-wrap: balance;
    font-weight: var(--font-weight-bold);
}

h1 {
    font-size: var(--font-size-2xl);
    max-width: 20ch;
}

h2 {
    font-size: var(--font-size-xl);
    max-width: 35ch;
}

h3 {
    font-size: var(--font-size-lg);
    max-width: 35ch;
}

:is(h4, h5, h6) {
    font-size: var(--font-size-md);
}

small {
    font-size: var(--font-size-xs);
}

ins {
    text-decoration: none;
    background: var(--surface-primary-inverted);
    color: var(--text-primary-inverted);
    padding-inline: 0.3em;
}

:is(code, kbd, samp) {
    font-family: var(--font-mono);
    background: var(--surface-primary);
    padding: 0.1em 0.2em;
    hyphens: none;
    tab-size: 2;
    text-align: left;
    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
    box-decoration-break: clone;
    -webkit-box-decoration-break: clone;
}

/* This is quite a new property, so we want code styles to at least, not be huge */
@supports not (font-size-adjust: from-font) {
    :is(code, kbd, samp) {
        font-size: 0.85em;
    }
}

pre:has(code) {
    background: var(--surface-primary);
    padding: var(--space-sm);
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
}

pre code {
    border: none;
    background: none;
    padding: 0;
}

kbd {
    border: 1px solid;
    padding-block-end: 0.1em;
}

var {
    font-style: normal;
    font-weight: var(--font-weight-medium);
}

q {
    font-style: italic;
}

/* Position sub and sup with transform so it doesn't affect leading */
sub,
sup {
    font-size: var(--font-size-xs);
    vertical-align: baseline;
    display: inline-block;
}

sub {
    transform: translateY(0.65ex);
}

sup {
    transform: translateY(-0.7ex);
}

:is(ol, ul) {
    margin-block-end: 0;
}

ul {
    padding-inline-start: 1.8ch;
    list-style-type: disc;
}

ul:not([class]) > li {
    padding-inline-start: var(--space-xs);
}

ul ::marker {
    font-size: 0.8lh;
}

ol ::marker {
    font-size: 1em;
    font-weight: var(--font-bold);
}

[role="list"][class],
[role="tablist"] {
    margin-block: 0;
    padding: 0;
    list-style: none;
}

dt {
    font-weight: var(--font-weight-medium);
}

dt + dd {
    margin-block-start: var(--space-xs);
}

dd + dt {
    margin-block-start: var(--space-sm);
}

dd {
    margin-inline-start: 1.5ch;
}

blockquote {
    margin-inline: 0;
    color: var(--accent);
}

blockquote footer {
    margin-block-start: var(--space-sm);
    color: var(--text-subtle);
    font-size: var(--font-size-xs);
}

blockquote q {
    font-style: normal;
}

address {
    font-style: normal;
}

:is(video, iframe[src*="youtube"], iframe[src*="vimeo"]) {
    display: block;
    width: 100%;
    height: auto;
    aspect-ratio: 16/9;
}

:is(img, picture) {
    height: auto;
    max-width: 100%;
    display: block;
}

picture {
    width: max-content;
}

figure {
    margin-inline: 0;
}

figcaption {
    padding-block-start: 0.5em;
    font-size: var(--font-size-xs);
    font-family: var(--font-mono);
}

table {
    border: var(--border-light);
    border-collapse: collapse;
    width: 100%;
}

th {
    text-align: left;
    font-weight: var(--font-weight-bold);
    line-height: var(--leading-tight);
    background: var(--surface-primary);
}

thead th {
    padding-block: var(--space-sm);
}

td,
th {
    padding: var(--space-xs) var(--space-sm);
}

th:not(:only-of-type) {
    border-block-end: var(--border-light);
}

th:only-of-type {
    border-inline-end: var(--border-light);
}

:is(th, td) ~ :is(th, td) {
    border-inline-start: var(--border-light);
}

tr + tr :is(th, td) {
    border-block-start: var(--border-light);
}

caption {
    caption-side: bottom;
    margin-block-start: var(--space-sm);
}

a:not([class]):hover {
    text-underline-offset: 0.2lh;
}

:is(h1, h2, h3, h4) a:not([class]) {
    text-decoration-thickness: 0.1ex;
    text-underline-offset: 0.2ex;
}

:is(h1, h2, h3, h4) a:not([class]):hover {
    text-underline-offset: 0.3ex;
}

::selection {
    color: var(--text-primary-inverted);
    background: var(--surface-primary-inverted);
}

:target {
    scroll-margin-block: 5lh;
}

abbr {
    cursor: help;
    text-underline-offset: 0.2ex;
}

hr {
    border: none;
    border-block-start: var(--border-light);
    margin-block: var(--flow-space, var(--space-xl));
}

svg {
    width: auto;
    height: var(--icon-size);
    vertical-align: middle;
    flex-shrink: 0;
    display: block;
}

svg[role="img"] {
    width: revert;
    height: revert;

    padding: var(--space-xs);
}

:focus {
    outline-color: var(--focus-ring-color);
    outline-offset: var(--focus-ring-offset);
    outline-style: var(--focus-ring-style);
    outline-width: var(--focus-ring-width);
}

@supports selector(:focus-visible) {
    :focus {
        outline: none;
    }

    :focus-visible {
        outline-color: var(--focus-ring-color);
        outline-offset: var(--focus-ring-offset);
        outline-style: var(--focus-ring-style);
        outline-width: var(--focus-ring-width);
    }
}

@supports (-moz-appearance: none) {
    :root {
        --focus-ring-offset: 0.2ex;
    }
}

:disabled {
    cursor: not-allowed;
    opacity: 0.5;
    background-color: var(--surface-inactive);
}

::placeholder {
    color: var(--text-subtle);
    font-size: var(--font-size-xs);
}

/* FORMS */
form > * + * {
    margin-top: var(--flow-space, 1rem);
}

:is(button, input, select, textarea) {
    font: inherit;
}

:is(input, select, textarea) {
    accent-color: var(--accent);
}

:is(input:not([type="checkbox"], [type="radio"], [type="color"]), select, textarea) {
    background-color: var(--input-bg);
    padding-block: var(--input-padding-block);
    padding-inline: var(--input-padding-inline);
    border: var(--input-border);
    border-radius: var(--input-radius);
    font-family: var(--input-font-family, inherit);
    font-size: var(--input-font-size, inherit);
    color: var(--input-font-color, inherit);
    font-weight: var(--input-font-weight, inherit);
    line-height: var(--input-line-height, inherit);
    width: var(--input-width, 100%);
    box-shadow: var(--input-shadow);
}

:is(input, textarea):disabled::placeholder {
    color: var(--text-inactive);
}

label {
    font-family: var(--label-font-family);
    font-size: var(--label-font-size);
    font-weight: var(--label-font-weight);
    line-height: var(--label-line-height);
    color: var(--label-color);
}

/* This is used to add a margin to the input when it is not a checkbox or radio (i.e. not nested in a label). It is also used to add a margin to the button when it is a combobox. */
label:not(:has(input)) + :is(input, select, textarea):not([type="checkbox"]):not([type="radio"]),
label:not(:has(input)) + :is(button[role="combobox"]) {
    margin-block-start: var(--label-gap);
}

/* Checkbox and radios are nested and displayed as flex for more control */
label:has(input) {
    display: flex;
    align-items: flex-start;
    gap: var(--space-2xs);
    font-weight: var(--font-weight-normal);
}

/* Slightly adjusts the vertical position of the check/radio */
label:has(input) input {
    transform: translateY(0.25ex);
}

input:disabled {
    background: var(--surface-inactive);
}

input:disabled,
label input:disabled + * {
    cursor: not-allowed;
}

/* label + input[type="checkbox"],
label + input[type="radio"] {
    display: inline-flex;
    align-items: flex-start;
    gap: var(--label-inline-gap);
} */

/* input[type="checkbox"] {
    width: 1em;
    height: 1em;
    margin: 0;
} */

/* label + input:not([type="checkbox"]):not([type="radio"]):not([type="range"]),
label + select,
label + textarea,
label + button {
    margin-block-start: var(--label-gap);
} */

/* :is(input, select, textarea) + button {
    margin-block-start: var(--space-md, 1rem);
} */

/* [role="radio"] + input + .label {
    --radio-inline-gap: var(--space-2xs);
    margin-inline-start: var(--radio-inline-gap);
} */
